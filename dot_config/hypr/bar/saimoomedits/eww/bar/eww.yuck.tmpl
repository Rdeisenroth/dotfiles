;; Variables
(deflisten clock_status
  :initial '{"second": "XX", "minute": "XX", "hour": "XX", "date": "XX.XX.XXXX"}'
  "python scripts/clock.py"
)
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll battery :interval "15s" "./scripts/battery --bat")
(defpoll battery_status :interval "1m" "./scripts/battery --bat-st")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar os_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar bar_root "$HOME/.config/hypr/bar/saimoomedits/eww/bar/")
(defvar eww "eww -c $HOME/.config/hypr/bar/saimoomedits/eww/bar/")

(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")

(deflisten window :initial "..." "bash ~/.config/eww/scripts/get-window-title")

(deflisten volume_status :initial '{"icon":"Û∞ñÄ","volume":35}' "scripts/audio")
(deflisten song :default "Loading" "playerctl --follow metadata --format \{\{title\}\}")
(deflisten song_artist :default "Loading" "playerctl --follow metadata --format \{\{artist\}\}")
; (deflisten song_time :default "0" "playerctl --follow metadata --format \{\{ duration(position) \}\}|\{\{ duration(mpris:length) \}\}")
(deflisten song_status :default "Loading" "playerctl --follow metadata --format \{\{status\}\}")
(deflisten cover_art :default "" "playerctl --follow metadata --format \{\{mpris:artUrl\}\}")

;; widgets

(defwidget wifi []
  (eventbox :onhover "${eww} update wifi_rev=true"
    :onhoverlost "${eww} update wifi_rev=false"
    (box :vexpand "false" :class "wifi" :hexpand "false" :space-evenly "false"
      (button :class "module-wif" :onclick "nm-connection-editor&" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
      ; (label    :class "module_essid"
        ;   :text ESSID_WLAN
        ;   :orientation "h"
      ; )
      (revealer :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label    :class "module_essid"  :onclick "nm-connection-editor&"
          :text ESSID_WLAN
          :orientation "h"
        ))
    )))


(deflisten workspace "scripts/workspace")
(defwidget workspaces []
  (literal :content workspace))

(defwidget bat []
  (icon-module :class "cpu" :icon "Û∞Åπ" :vexpand "false" :hexpand "false"
    (label :class "cpu_text":text "${battery}%")))

; Modules foldstart
; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
    :orientation "h"
    :halign "end"
    :space-evenly false
    :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))
; foldend

(defwidget cpu []
  (icon-module :class "cpu" :icon "Û∞çõ" :vexpand "false" :hexpand "false"
    (label :class "cpu_text":text "${round(EWW_CPU.avg, 0)}%")))

(defwidget ram []
  (icon-module :class "ram" :icon "ÓØ§" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem/(1024*1024), 0)}MiB")))

(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${eww} update time_rev=true"
    :onhoverlost "${eww} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text "${clock_status.hour}" :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text "${clock_status.minute}" :class "clock_minute_class")
      (label :text "${clock_status.second}" :class "clock_second_class")
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (button :class "clock_date_class"
          :onclick "$HOME/.config/eww/bar/scripts/pop calendar" "${clock_status.date}"
        )
      ))))

(defwidget volume []
  (eventbox :onhover "${eww} update vol_reveal=true"
    :onhoverlost "${eww} update vol_reveal=false"
    (box :class "volume" :space-evenly "false" :orientation "h" :spacing "3"
      (button   :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"   :class "volume_icon" "${volume_status.icon}")
      (revealer :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
        (scale    :class "volbar"
          :value "${volume_status.volume}"
          :orientation "h"
          :tooltip "${volume_status.volume}%"
          :max 100
          :min 0
        :onchange "amixer -D pulse sset Master {}%" ))
      (button   :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"   :class "volume_text" "${volume_status.volume}%")
    )))

(defwidget bright []
  (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
    (box :class "brightness" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text "Û∞õ®" :class "bright_icon" :tooltip "brightness")
      (revealer :transition "slideleft"
        :reveal br_reveal
        :duration "350ms"
        (scale    :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
        :onchange "light -S {}" ))
      (label :text "${brightness_percent}%" :class "bright_text" :tooltip "brightness: ${brightness_percent}%")
      )))

(defwidget window_w []
  (box :space-evenly "false" :orientation "h" :spacing "3":halign "start" :class "window_title"
    (label :text "${window}" :limit-width 60 :show_truncated false
    )
  )
)

(defwidget launcher []
  (eventbox :onhover "${eww} update os_reveal=true"
    :onhoverlost "${eww} update os_reveal=false"
    (box :class "launcher_module" :orientation "h" :halign "start" :space-evenly "false" :spacing "3"  :vexpand "false" :hexpand "false"
      (button :onclick "~/.config/polybar/shapes/scripts/launcher.sh" :class "iconlauncher" :tooltip "Show Application Launcher" "ÔåÉ")
      ;  (button :onclick "rofi -show 'Global Search' -modi 'Global Search':$HOME/.config/hypr/rofi/global/rofi-spotlight.sh -theme $HOME/.config/hypr/rofi/global/rofi.rasi &" :class "iconsearch" "üîé")
      (revealer :transition "slideleft"
        :reveal os_reveal
        :duration "350ms"
        (label :text "Arch Linux" :limit-width 60 :show_truncated false :class "os_name")
      )
    )
  )
)


;;  Music
(defwidget music []
  (eventbox :onhover "${eww} update music_reveal=true"
    :onhoverlost "${eww} update music_reveal=false"
    (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true"
      (box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
      (button :class "song" :wrap "true"
        ; :onclick "sleehyprctl dispatch focuswindow Spotify"
        (label :text song :limit-width 13 :show_truncated false))
      (button :class "song-artist" :wrap "true"
        ; :onclick "hyprctl dispatch focuswindow Spotify"
        (label :text "- ${song_artist}" :limit-width 12 :show_truncated false))
      (revealer :transition "slideright"
        :reveal "${song_status != 'Playing'}"
        :duration "350ms"
        (button :class "song_paused" :onclick "$HOME/.config/hypr/bar/saimoomedits/eww/bar/scripts/music_info --toggle" "(Paused)")
      )
      (revealer :transition "slideright"
        :reveal music_reveal
        :duration "350ms"
        (box :vexpand "false" :hexpand "true" :oreintation "h"
          (button :class "song_btn_prev" :onclick "$HOME/.config/hypr/bar/saimoomedits/eww/bar/scripts/music_info --prev" "Û∞íÆ")
          (button :class "song_btn_play" :onclick "$HOME/.config/hypr/bar/saimoomedits/eww/bar/scripts/music_info --toggle" "${song_status == 'Playing' ? 'Ôäã' : 'ÔîÄ'}")
          (button :class "song_btn_next" :onclick "$HOME/.config/hypr/bar/saimoomedits/eww/bar/scripts/music_info --next" "Û∞í≠")))
    )
  )
)

;; Systray
(defwidget sys_tray []
  (box :class "sys_tray" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
    (systray :pack-direction "ltr")
  )
)


(defwidget left []
  (box :orientation "h" :vexpand "false" :hexpand "false"
    :space-evenly false
    :halign "start"
    :valign "center"
    :class "left_modules"
    (launcher)
    ;(sep)
    (window_w)
  ))


(defwidget center []
  (box :orientation "h"
    :space-evenly false
    :halign "center"
    :valign "center"
    :class "center_modules"
    (workspaces)
    (sep)
    (music)
  ))


(defwidget right []
  (box :orientation "h"
    :space-evenly false
    :halign "end"
    :valign "bottom"
    :class "right_modules"
    ; {{if eq .laptop "true" }} --laptop stuff--
    ;(bright)
    (bat)
    ; {{ else }} --desktop stuff--

    ; {{ end }} --end laptop/desktop stuff--
    (cpu)
    (ram)
    ;(sep)
    (volume)
    ; (wifi)
    (sys_tray)
    ;(sep)
    (clock_module)
  )
)

(defwidget bar_1 []
  (box :class "bar_class"
    :orientation "h"
    (box :class "bar_content"
      (left)
      (center)
      (right)
    )
  ))

(include "./bar_windows.yuck")